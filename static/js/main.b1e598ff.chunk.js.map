{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","clickEm","id","alt","name","src","image","Wrapper","children","Title","App","state","pokemon","score","highScore","clickedPokemon","wordsOfWisdom","_this","indexOf","setState","concat","correctClick","console","log","incorrectClick","addPokemon","newScore","sortPokemon","party","sort","b","Math","random","_this2","this","components_Wrapper_Wrapper","components_Title_Title","map","components_Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"45CAWeA,SARF,SAAAC,GAAK,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,QAAQN,EAAMO,MACrDN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCD9BC,EAFC,SAAAZ,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,WCE1CC,EAFD,SAAAd,GAAK,OAAIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAqBJ,EAAMa,kBCyGjDE,oNAnGXC,MAAQ,CACJC,UACAC,MAAO,EACPC,UAAW,EACXC,eAAgB,GAChBC,cAAe,2CAGnBf,QAAU,SAAAC,IAEkB,IADDe,EAAKN,MAAMI,eAAeG,QAAQhB,IAErDe,EAAKE,SAAS,CAAEJ,eAAgBE,EAAKN,MAAMI,eAAeK,OAAOlB,KACjEe,EAAKI,eACLC,QAAQC,IAAI,gBAGZN,EAAKO,iBACLF,QAAQC,IAAI,iBAIpBE,WAAa,WACT,IAAMC,EAAWT,EAAKN,MAAME,MAAQ,EACpCI,EAAKE,SAAS,CACVN,MAAOa,IAEXJ,QAAQC,IAAIG,GACRA,GAAYT,EAAKN,MAAMG,UACvBG,EAAKE,SAAS,CAAEL,UAAWY,IAET,KAAbA,IACLT,EAAKE,SAAS,CACVN,MAAO,EACPC,UAAWG,EAAKN,MAAMG,UACtBC,eAAgB,GAChBC,cAAe,6CAEnBC,EAAKU,YAAYf,OAIzBe,YAAc,SAAAC,GACVA,EAAMC,KAAK,SAAChC,EAAGiC,GACX,MAAO,GAAMC,KAAKC,cAI1BX,aAAe,WACXJ,EAAKQ,aACLR,EAAKU,YAAYf,MAGrBY,eAAiB,WACbP,EAAKE,SAAS,CACVN,MAAO,EACPC,UAAWG,EAAKN,MAAMG,UACtBC,eAAgB,GAChBC,cAAe,wDAEnBM,QAAQC,IAAI,uDACZN,EAAKU,YAAYf,4EAGd,IAAAqB,EAAAC,KACP,OACItC,EAAAC,EAAAC,cAACqC,EAAD,KACIvC,EAAAC,EAAAC,cAACsC,EAAD,4BACAxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAWH,EAAAC,EAAAC,cAAA,oBAAYoC,KAAKvB,MAAME,QACjDjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAWH,EAAAC,EAAAC,cAAA,yBAAiBoC,KAAKvB,MAAMG,YACtDlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAWH,EAAAC,EAAAC,cAAA,UAAKoC,KAAKvB,MAAMK,iBAG9CpB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEVmC,KAAKvB,MAAMC,QAAQyB,IAAI,SAAAzB,GAAO,OAC3BhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAACwC,EAAD,CACIrC,QAASgC,EAAKhC,QACdC,GAAIU,EAAQV,GACZqC,IAAK3B,EAAQV,GACbI,MAAOM,EAAQN,MACfF,KAAMQ,EAAQR,sBAtFpCoC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b1e598ff.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n    <div className=\"card\" onClick={() => props.clickEm(props.id)}>\n        <div className=\"img-container\">\n            <img alt={props.name} src={props.image} />\n        </div>\n    </div>\n);\n\nexport default Card;","import React from \"react\";\r\n// import \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n// import \"./Title.css\";\r\n\r\nconst Title = props => <h1 className=\"title text-center\">{props.children}</h1>;\r\n\r\nexport default Title;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport pokemon from \"./pokemon.json\";\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        pokemon,\n        score: 0,\n        highScore: 0,\n        clickedPokemon: [],\n        wordsOfWisdom: \"Click a Pokemon to begin your journey\"\n    };\n\n    clickEm = id => {\n        const PokemonClicked = this.state.clickedPokemon.indexOf(id);\n        if (PokemonClicked === -1) {\n            this.setState({ clickedPokemon: this.state.clickedPokemon.concat(id) });\n            this.correctClick();\n            console.log(\"good click\");\n        }\n        else {\n            this.incorrectClick();\n            console.log(\"bad click\");\n        }\n    };\n\n    addPokemon = () => {\n        const newScore = this.state.score + 1;\n        this.setState({\n            score: newScore,\n        });\n        console.log(newScore);\n        if (newScore >= this.state.highScore) {\n            this.setState({ highScore: newScore});\n        }\n        else if (newScore === 12) {\n            this.setState({\n                score: 0,\n                highScore: this.state.highScore,\n                clickedPokemon: [],\n                wordsOfWisdom: \"Congrats! You are a Pokemon Click Master\"\n            });\n            this.sortPokemon(pokemon);\n        }\n    };\n\n    sortPokemon = party => {\n        party.sort((a, b) => {\n            return 0.5 - Math.random();\n        })\n    };\n\n    correctClick = () => {\n        this.addPokemon();\n        this.sortPokemon(pokemon);        \n    };\n\n    incorrectClick = () => {\n        this.setState({\n            score: 0,\n            highScore: this.state.highScore,\n            clickedPokemon: [],\n            wordsOfWisdom: \"Proceed to the nearest Pokemon Center and try again\"\n        });\n        console.log(\"Proceed to the nearest Pokemon Center and try again\");\n        this.sortPokemon(pokemon);\n    };\n\n  render() {\n    return (\n        <Wrapper>\n            <Title>Gotta Click Em All!</Title>\n            <div className=\"App\">\n                <div className=\"row\">\n                    <div className=\"col-md-4\"><h3>Score: {this.state.score}</h3></div>\n                    <div className=\"col-md-4\"><h3>High Score: {this.state.highScore}</h3></div>\n                    <div className=\"col-md-4\"><h3>{this.state.wordsOfWisdom}</h3></div>\n                </div>\n\n                <header className=\"App-header\">\n                    <div className=\"container\">\n                        <div className=\"row\">                   \n\n                            {this.state.pokemon.map(pokemon => (\n                                <div className=\"col-lg-3 col-sm-6\">    \n                                    <Card\n                                        clickEm={this.clickEm}\n                                        id={pokemon.id}\n                                        key={pokemon.id}\n                                        image={pokemon.image}\n                                        name={pokemon.name}\n                                    />\n                                </div>\n                            ))}\n                    \n                        </div>\n                    </div>\n                </header>\n            </div>\n        </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}